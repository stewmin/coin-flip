<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Vault Street</title>
  <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet"/>
  <!-- Firebase Libraries -->
  <script src="https://www.gstatic.com/firebasejs/10.9.0/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/10.9.0/firebase-auth-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/10.9.0/firebase-database-compat.js"></script>
  <style>
    /* Base styles */
    body {
      margin: 0;
      font-family: 'Press Start 2P', cursive;
      background: #111 url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewBox='0 0 20 20'%3E%3Crect width='1' height='1' fill='%23222222'/%3E%3C/svg%3E") repeat;
      color: white;
    }
    header {
      text-align: center;
      background: #000;
      color: gold;
      padding: 20px 10px;
      border-bottom: 2px solid gold;
      font-size: 12px;
    }
    .ticker {
      background: black;
      color: gold;
      padding: 8px;
      font-size: 10px;
      white-space: nowrap;
      overflow: hidden;
    }
    .container {
      max-width: 960px;
      margin: 20px auto;
      padding: 0 20px;
    }
    h2 { color: gold; font-size: 12px; margin-top: 30px; }
    button, input, select {
      font-family: 'Press Start 2P', cursive;
      font-size: 10px;
      background: gold;
      color: black;
      border: none;
      padding: 6px 10px;
      margin: 5px 0;
      cursor: pointer;
    }
    input, select { background: #ddd; color: #000; }
    .section {
      margin-top: 30px;
      padding: 15px;
      background: #1a1a1a;
      border: 2px solid #333;
      border-radius: 10px;
    }
    /* My Vault Summary styling */
    #vaultSummary p {
      margin: 5px 0;
      font-size: 10px;
    }
    /* Vault Ratio styling */
    #vaultRatio {
      font-size: 10px;
      margin-top: 10px;
      color: cyan;
    }
    /* Trading Portal Styling */
    #tradePortal {
      display: none;
      margin-top: 20px;
      padding: 15px;
      background: #1a1a1a;
      border: 2px solid #333;
      border-radius: 10px;
    }
    #tradeRequestForm p, #tradeRequestsList p { margin: 5px 0; font-size: 10px; }
    footer {
      text-align: center;
      background: #000;
      color: gray;
      padding: 20px;
      font-size: 10px;
      margin-top: 40px;
    }
    label { display: block; margin-top: 10px; }
  </style>
</head>
<body>
  <header>
    <h1>üèõÔ∏è Vault Street</h1>
  </header>
  <!-- AUDIO SYSTEM -->
  <audio id="bgMusic" autoplay loop>
    <source src="https://cdn.pixabay.com/download/audio/2023/04/07/audio_a9c23c43fb.mp3?filename=fantasy-market-ambience-143152.mp3" type="audio/mp3">
  </audio>
  <audio id="sfxMint">
    <source src="https://cdn.pixabay.com/download/audio/2022/03/15/audio_3d3a9a6397.mp3?filename=coin-spin-140139.mp3" type="audio/mp3">
  </audio>
  <audio id="sfxTrade">
    <source src="https://cdn.pixabay.com/download/audio/2022/03/15/audio_6a9ee734cc.mp3?filename=coins-153522.mp3" type="audio/mp3">
  </audio>
  <!-- Mute/Unmute Toggle -->
  <button onclick="toggleAudio()" style="position: fixed; top: 10px; right: 10px; z-index:999;">üîä Mute/Unmute</button>
  
  <!-- Ticker -->
  <div class="ticker">
    <marquee id="tradeTicker" scrollamount="4">Vault Street Exchange ‚Äî live market loading...</marquee>
  </div>
  
  <div class="container">
    <!-- Authentication Panel -->
    <div id="auth-panel" class="section">
      <h2>Login / Register</h2>
      <input type="email" id="email" placeholder="Email"><br>
      <input type="password" id="password" placeholder="Password"><br>
      <button onclick="login()">Login / Register</button>
    </div>
    <!-- User Panel -->
    <div id="user-panel" class="section" style="display:none;">
      <h2>Welcome, <span id="userEmail"></span></h2>
      <!-- Minting Section -->
      <h3>Mint a Coin</h3>
      <button id="mintBtn" disabled>Mint New Coin</button>
      <p id="mintNotice" style="color:red; font-size:10px;">Minting is disabled. Market ratio is below 1.0</p>
      <!-- My Vault Section -->
      <h3>My Vault</h3>
      <div id="vaultSummary">
        <!-- Coin counts per rarity will appear here -->
      </div>
      <!-- Vault Ratio Display -->
      <p id="vaultRatio"></p>
      
      <!-- Trading Portal -->
      <button id="toggleTradePortalButton" onclick="toggleTradePortal()">Open Trading Portal</button>
      <div id="tradePortal">
        <h3>Trading Portal</h3>
        <!-- Trade Request Creation Form -->
        <div id="tradeRequestForm" class="section" style="background:#222;">
          <h4>Create Trade Request</h4>
          <label>Offer Coin Type:</label>
          <select id="tradeOfferType">
            <option>Gold</option>
            <option>Platinum</option>
            <option>Iridium</option>
            <option>Rhodium</option>
          </select>
          <label>Offer Quantity:</label>
          <input type="number" id="tradeOfferQty" min="1" value="1">
          <label>Request Coin Type:</label>
          <select id="tradeRequestType">
            <option>Gold</option>
            <option>Platinum</option>
            <option>Iridium</option>
            <option>Rhodium</option>
          </select>
          <label>Request Quantity:</label>
          <input type="number" id="tradeRequestQty" min="1" value="1">
          <button onclick="submitTradeRequest()">Submit Trade Request</button>
        </div>
        <!-- Pending Trade Requests List -->
        <h4>Pending Trade Requests</h4>
        <div id="tradeRequestsList">
          <!-- Trade requests will be displayed here -->
        </div>
      </div>
      
      <button onclick="logout()">Logout</button>
    </div>
  </div>
  
  <footer>
    <p>&copy; 2025 Vault Street</p>
  </footer>
  
  <script>
    // 1. Firebase configuration and initialization
    const firebaseConfig = {
      apiKey: "AIzaSyDfZZUf2pY9ueCx6Q7m86dnitU_voims-8",
      authDomain: "coin-flip-4a693.firebaseapp.com",
      databaseURL: "https://coin-flip-4a693-default-rtdb.firebaseio.com",
      projectId: "coin-flip-4a693",
      storageBucket: "coin-flip-4a693.appspot.com",
      messagingSenderId: "572907715515",
      appId: "1:572907715515:web:68a53fc5a8e4b5157fe29e"
    };
    firebase.initializeApp(firebaseConfig);
    
    const auth = firebase.auth();
    const db = firebase.database();
    
    // Helper: Reference to a user's coins
    const userRef = uid => db.ref("users/" + uid + "/coins");
    
    // 2. Authentication Listener & Initial Coin Check
    auth.onAuthStateChanged(user => {
      if (user) {
        document.getElementById("auth-panel").style.display = "none";
        document.getElementById("user-panel").style.display = "block";
        document.getElementById("userEmail").textContent = user.email;
        db.ref("users/" + user.uid).update({ email: user.email });
        updateMintAccess();
        checkInitialCoin();  // Ensure new users start with one coin
        loadVault();
        updateLeaderboard();  // (if still needed)
      } else {
        document.getElementById("auth-panel").style.display = "block";
        document.getElementById("user-panel").style.display = "none";
      }
    });
    
    // 3. Login / Register functions
    function login() {
      const email = document.getElementById("email").value;
      const pass = document.getElementById("password").value;
      auth.signInWithEmailAndPassword(email, pass).catch(() => {
        auth.createUserWithEmailAndPassword(email, pass)
          .then(userCred => {
            db.ref("users/" + userCred.user.uid).update({ email });
          })
          .catch(err => alert(err.message));
      });
    }
    
    function logout() {
      auth.signOut();
    }
    
    // 4. Minting & Vault Functionality
    const registryRef = db.ref("mintRegistry");
    const mintedRef = db.ref("mintedCount");
    let canMint = false;
    
    function updateMintAccess() {
      db.ref("tradeStats").once("value").then(snap => {
        const data = snap.val() || {};
        const avgRatio = data.averageTradeRatio ?? 0;
        canMint = avgRatio >= 1.0;
        document.getElementById("mintBtn").disabled = !canMint;
        document.getElementById("mintNotice").style.display = canMint ? "none" : "block";
      });
    }
    
    // Function to mint a coin (used by both button and initial coin check)
    function mintNewCoin(callback) {
      const user = auth.currentUser;
      if (!user || !canMint) return;
      mintedRef.once("value").then(snap => {
        const serial = (snap.val() || 0) + 1;
        const rarity = getRarity();
        const now = new Date().toISOString();
        const coinData = { serial, rarity, date: now };
    
        registryRef.child("coin_" + serial).set(coinData);
        userRef(user.uid).child("coin_" + serial).set(coinData);
        mintedRef.set(serial);
    
        playSFX('sfxMint');
        if (callback) callback();
      });
    }
    
    // Check if a new user has an empty vault; if so, mint an initial coin.
    function checkInitialCoin() {
      const user = auth.currentUser;
      if (!user) return;
      userRef(user.uid).once("value").then(snap => {
        if (!snap.exists()) {
          mintNewCoin(() => {
            updateMintAccess();
            loadVault();
            updateLeaderboard();
          });
        }
      });
    }
    
    // loadVault creates a summary of coins in the user's vault by rarity
    function loadVault() {
      const user = auth.currentUser;
      if (!user) return;
      userRef(user.uid).once("value").then(snap => {
        const data = snap.val();
        const counts = { Gold: 0, Platinum: 0, Iridium: 0, Rhodium: 0 };
        if (data) {
          Object.values(data).forEach(coin => {
            counts[coin.rarity] = (counts[coin.rarity] || 0) + 1;
          });
        }
        const vaultSummary = document.getElementById("vaultSummary");
        vaultSummary.innerHTML = `
          <p>Gold: ${counts["Gold"] || 0}</p>
          <p>Platinum: ${counts["Platinum"] || 0}</p>
          <p>Iridium: ${counts["Iridium"] || 0}</p>
          <p>Rhodium: ${counts["Rhodium"] || 0}</p>
        `;
        // Update vault ratio each time vault is loaded
        updateVaultRatio();
      });
    }
    
    // 5. My Vault Ratio
    // Calculate average vault score across all users and compute current user's ratio.
    function updateVaultRatio() {
      const currentUser = auth.currentUser;
      if (!currentUser) return;
      let totalScore = 0, countUsers = 0;
      db.ref("users").once("value").then(snapshot => {
        snapshot.forEach(userSnap => {
          const coins = userSnap.val().coins;
          const score = calculateVaultScore(coins);
          totalScore += score;
          countUsers++;
        });
        const averageScore = countUsers ? totalScore / countUsers : 0;
        userRef(currentUser.uid).once("value").then(snapUser => {
          const currentScore = calculateVaultScore(snapUser.val());
          let ratio = averageScore ? (currentScore / averageScore) : 1;
          document.getElementById("vaultRatio").textContent = "My Vault Ratio: " + ratio.toFixed(2);
        });
      });
    }
    
    // 6. Trade Request System
    // (a) Submit a new trade request
    function submitTradeRequest() {
      const currentUser = auth.currentUser;
      if (!currentUser) { alert("You must be logged in."); return; }
      const offerType = document.getElementById("tradeOfferType").value;
      const offerQty = parseInt(document.getElementById("tradeOfferQty").value);
      const requestType = document.getElementById("tradeRequestType").value;
      const requestQty = parseInt(document.getElementById("tradeRequestQty").value);
      
      if (offerQty < 1 || requestQty < 1) {
        alert("Please enter valid quantities.");
        return;
      }
      
      const tradeRequest = {
        requesterUid: currentUser.uid,
        requesterEmail: currentUser.email,
        offer: { coinType: offerType, quantity: offerQty },
        request: { coinType: requestType, quantity: requestQty },
        timestamp: Date.now()
      };
      
      db.ref("tradeRequests").push(tradeRequest, error => {
        if (error) {
          alert("Trade request submission failed.");
        } else {
          alert("Trade request submitted.");
        }
      });
    }
    
    // (b) Listen for and display pending trade requests
    function listenTradeRequests() {
      const ref = db.ref("tradeRequests");
      ref.on("value", (snap) => {
        const data = snap.val();
        const listDiv = document.getElementById("tradeRequestsList");
        listDiv.innerHTML = "";
        if (!data) {
          listDiv.innerHTML = "<p>No pending trade requests.</p>";
        } else {
          Object.entries(data).forEach(([id, req]) => {
            let html = `<p>${req.requesterEmail} offers ${req.offer.quantity} ${req.offer.coinType} coin${req.offer.quantity > 1 ? "s" : ""} in exchange for ${req.request.quantity} ${req.request.coinType} coin${req.request.quantity > 1 ? "s" : ""}`;
            if (auth.currentUser && auth.currentUser.uid !== req.requesterUid) {
              html += ` <button onclick="acceptTradeRequest('${id}')">Accept Trade</button>`;
            }
            html += `</p>`;
            listDiv.innerHTML += html;
          });
        }
      });
    }
    listenTradeRequests();
    
    // (c) Accept a trade request
    function acceptTradeRequest(requestId) {
      const currentUser = auth.currentUser;
      if (!currentUser) { alert("You must be logged in."); return; }
      db.ref("tradeRequests/" + requestId).once("value").then(snap => {
        const req = snap.val();
        if (!req) { alert("Trade request no longer exists."); return; }
        // Check that the acceptor has enough of the requested coin type
        userRef(currentUser.uid).once("value").then(snapVault => {
          const vaultData = snapVault.val();
          let count = 0;
          let coinIds = [];
          if (vaultData) {
            Object.entries(vaultData).forEach(([coinId, coin]) => {
              if (coin.rarity === req.request.coinType && count < req.request.quantity) {
                count++;
                coinIds.push(coinId);
              }
            });
          }
          if (count < req.request.quantity) {
            alert("You do not have enough " + req.request.coinType + " coins to fulfill this trade.");
            return;
          }
          // Check that the requester still has the offered coins
          userRef(req.requesterUid).once("value").then(snapRequester => {
            const requesterData = snapRequester.val();
            let reqCount = 0;
            let reqCoinIds = [];
            if (requesterData) {
              Object.entries(requesterData).forEach(([coinId, coin]) => {
                if (coin.rarity === req.offer.coinType && reqCount < req.offer.quantity) {
                  reqCount++;
                  reqCoinIds.push(coinId);
                }
              });
            }
            if (reqCount < req.offer.quantity) {
              alert("The requester no longer has enough " + req.offer.coinType + " coins.");
              return;
            }
            // Execute the trade:
            // Remove acceptor's coins
            coinIds.forEach(coinId => {
              db.ref("users/" + currentUser.uid + "/coins/" + coinId).remove();
            });
            // Add those coins to the requester's vault
            coinIds.forEach(() => {
              db.ref("users/" + req.requesterUid + "/coins").push({ serial: "traded", rarity: req.request.coinType, date: new Date().toISOString() });
            });
            // Remove requester's offered coins
            reqCoinIds.forEach(coinId => {
              db.ref("users/" + req.requesterUid + "/coins/" + coinId).remove();
            });
            // Add those coins to the acceptor's vault
            reqCoinIds.forEach(() => {
              db.ref("users/" + currentUser.uid + "/coins").push({ serial: "traded", rarity: req.offer.coinType, date: new Date().toISOString() });
            });
            // Remove the trade request
            db.ref("tradeRequests/" + requestId).remove();
            playSFX('sfxTrade');
            alert("Trade accepted and completed successfully!");
            loadVault();
          });
        });
      });
    }
    
    // 7. Leaderboard functionality (optional)
    function calculateVaultScore(coins) {
      if (!coins) return 0;
      const rarityValues = { Gold: 1, Platinum: 2, Iridium: 4, Rhodium: 8 };
      let score = 0;
      const owned = new Set();
      Object.values(coins).forEach(c => {
        owned.add(c.rarity);
        score += rarityValues[c.rarity] || 0;
        if (parseInt(c.serial) < 100) score += 1;
      });
      if (owned.size === 4) score += 5;
      return score;
    }
    
    function updateLeaderboard() {
      db.ref("users").once("value").then(snapshot => {
        const scores = [];
        snapshot.forEach(userSnap => {
          const coins = userSnap.val()?.coins;
          const score = calculateVaultScore(coins);
          scores.push({ email: userSnap.val()?.email || "Unknown", score });
        });
        scores.sort((a, b) => b.score - a.score);
        // (Update a leaderboard element if desired)
      });
    }
    
    // 8. Trade Ticker functionality (unchanged)
    function updateTradeTicker() {
      db.ref("mintRegistry").once("value").then(snap => {
        const data = snap.val();
        if (!data) return;
        const trades = Object.values(data)
          .sort((a, b) => b.serial - a.serial)
          .slice(0, 10)
          .map(entry => {
            const ratio = entry.ratio || Math.random() * 2.5;
            const emoji = ratio >= 2.0 ? "‚úÖ" : ratio < 1.0 ? "‚ùå" : "‚öñÔ∏è";
            return `#${entry.serial}: ${entry.rarity} (${ratio.toFixed(2)}) ${emoji}`;
          });
        document.getElementById("tradeTicker").textContent = trades.join(" | ");
      });
    }
    setInterval(updateTradeTicker, 30000);
    updateTradeTicker();
    
    // 9. Audio Controls
    let muted = localStorage.getItem("vaultAudioMuted") === "true";
    document.getElementById("bgMusic").muted = muted;
    
    function toggleAudio() {
      muted = !muted;
      localStorage.setItem("vaultAudioMuted", muted);
      document.getElementById("bgMusic").muted = muted;
    }
    
    function playSFX(id) {
      const audio = document.getElementById(id);
      if (!muted && audio) {
        audio.pause();
        audio.currentTime = 0;
        audio.play().catch(err => console.warn("SFX play error:", err));
      }
    }
    
    // 10. Trading Portal Toggle
    function toggleTradePortal() {
      const portal = document.getElementById("tradePortal");
      const btn = document.getElementById("toggleTradePortalButton");
      if (portal.style.display === "none" || portal.style.display === "") {
        portal.style.display = "block";
        btn.textContent = "Close Trading Portal";
      } else {
        portal.style.display = "none";
        btn.textContent = "Open Trading Portal";
      }
    }
    
  </script>
</body>
</html>
